/*
    В данном файле вместо методов класса Integers стоят заглушки, которые просто генерируют исключение NotImplementedException. 
    Необходимо реализовать данные методы.

    _Хозяйке на заметку_

    Как видите, ничего нигде не подчеркивается красным, и, если попробовать скомпилировать проект в текущем изначальном виде, никаких ошибок компиляции не будет. 
    Если же убрать генерацию исключений и оставить методы пустыми, появятся ошибки в стиле "метод ничего не возвращает". 

    Генерация исключения NotImplementedException в еще нереализованных кусках программы - это стандартный и "правильный" способ делать заглушки, оставляя реализацию "на потом".
    Например, если вы пишете прототип и сосредоточены на высокоуровневом алгоритме решения задачи, нежели на его непосредственной реализации.

    Вывод:
        * писать заглушки в стиле "вернуть хотя бы что-то лишь бы скомпилировалось" - не твой бро,
        * throw new NotImplementedException() - твой бро.

    Подумай, кстати, почему.
*/

using System;

namespace Numbers
{
    /// <summary>
    /// Класс методов для работы с целыми числами.
    /// </summary>
    /// <remarks>
    /// _Хозяйке на заметку_
    /// 
    /// Текущий блок является комментарием, т.к. каждая строка начинается с //, но имеет свою внутреннюю структуру и синтаксис.
    /// Это так называемые Xml documentation comments. Их поддерживает сам компилятор. Они позволяют писать чуть более умные и продвинутые комментарии к сущностям,
    /// а потом, например, автоматически генерировать по ним красивую документацию.
    /// Правилом хорошего тона считается писать комментарии к методам, классам и другим сущностям, используя данный синтаксис - так ты и комментируешь их, и документируешь.
    /// Внутри методов он не поддерживается - там нечего документировать, поэтому там обычные.
    /// 
    /// Ниже приведены примеры простейших комментариев. Если наведете мышкой на названия самих методов, увидите, что студия отображает комментарий в подписи.
    /// Наведите теперь на NotImplementedException() - комментарий во всплывашке сделан с помощью такого же синтаксиса.
    /// 
    /// Чтобы создать такой комментарий, не нужно писать разметку целиком самому.
    /// Удалите блок комментария к методу HalfIntMaxValue и на его месте введите /// - студия сама создаст нужные блоки. Как видите, из сгенерированных блоков я оставил только summary.
    /// </remarks>
    public static class Integers
    {
        /// <summary>
        /// Возвращает половину максимального числа типа int.
        /// </summary>
        internal static int HalfIntMaxValue()
        {
            /*
                После C++ вы будете приятно удивлены какое умное в .Net автодополнение (IntelliSense).
                По идее, если просто набрать return и нажать пробел, в появившемся списке автодополнения одной из первых будет нужная тебе константа :)
            */
            throw new NotImplementedException();
        }

        /// <summary>
        /// Возвращает куб заданного целого числа типа <see cref="int"/>.
        /// </summary>
        internal static int Cube(int x)
        {
            // не сомневайся, пиши. Тут без подвохов.
            throw new NotImplementedException();
        }

        /// <summary>
        /// Возвращает куб заданного целого числа типа int. Вычисление куба проводится в режиме проверки переполнения типа.
        /// </summary>
        internal static int CubeWithOverflowCheck(int x)
        {
            /*
                Тут придется погуглить, сорри.
                И заодно подумай какой режим выставлен по умолчанию. Почему. И почему категорически нельзя надеяться на режим по умолчанию.
            */
            throw new NotImplementedException();
        }

        /// <summary>
        /// Возвращает куб заданного целого числа типа int. Вычисление куба проводится в режиме игнорирования переполнения типа.
        /// </summary>
        internal static int CubeWithoutOverflowCheck(int x)
        {
            // если сделал остальные, то с этим уже тоже должно быть понятно.
            throw new NotImplementedException();
        }

        internal static int Parse(string s)
        {
            return int.Parse(s);
        }

        internal static string ToString(int x)
        {
            return x.ToString("## 'items'");
        }
    }
}
